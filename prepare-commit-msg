#!/usr/bin/env python3

import sys
import subprocess
import re
import os
import xml.etree.ElementTree as ET

def main():
    if len(sys.argv) < 2:
        sys.exit(1)
    
    commit_msg_file = sys.argv[1]
    commit_source = sys.argv[2] if len(sys.argv) > 2 else ""
    
    # Skip if running non-interactively
    if not os.isatty(0) or not os.isatty(1) or not os.isatty(2):
        sys.exit(0)
    
    # Skip if environment indicates automated/non-interactive usage
    if any(var in os.environ for var in ['CI', 'CLAUDE_CODE', 'ANTHROPIC_API_KEY']):
        sys.exit(0)
    
    # Exit early if a rebase is in progress
    git_dir = subprocess.check_output(['git', 'rev-parse', '--git-dir'], text=True).strip()
    rebase_paths = [
        os.path.join(git_dir, 'rebase-merge'),
        os.path.join(git_dir, 'rebase-apply'),
        os.path.join(git_dir, 'REBASE_HEAD'),
        os.path.join(git_dir, 'CHERRY_PICK_HEAD'),
    ]
    
    if any(os.path.exists(path) for path in rebase_paths):
        sys.exit(0)
    
    # Skip automated commits (merge, squash, rebase, cherry-pick, etc.)
    # Run for manual commits (empty, "template", or "commit")
    if commit_source in ["merge", "squash"]:
        sys.exit(0)
    
    # Read initial message and staged diff
    with open(commit_msg_file, 'r') as f:
        initial_msg = f.read().strip()
    
    try:
        diff = subprocess.check_output(['git', 'diff', '--cached'], text=True)
        branch_name = subprocess.check_output(['git', 'branch', '--show-current'], text=True).strip()
        
        # Determine primary branch dynamically
        base_branch = 'main'  # Default fallback
        try:
            # Try to get the default branch from remote HEAD
            result = subprocess.check_output(['git', 'symbolic-ref', 'refs/remotes/origin/HEAD'], text=True, stderr=subprocess.DEVNULL).strip()
            base_branch = result.split('/')[-1]
        except subprocess.CalledProcessError:
            # Fallback: check common branch names
            for branch in ['main', 'master', 'develop']:
                try:
                    subprocess.check_output(['git', 'show-ref', '--verify', '--quiet', f'refs/heads/{branch}'], stderr=subprocess.DEVNULL)
                    base_branch = branch
                    break
                except subprocess.CalledProcessError:
                    continue
        
        # Handle repositories with no commits
        try:
            branch_diff = subprocess.check_output(['git', 'diff', f'{base_branch}...HEAD'], text=True, stderr=subprocess.DEVNULL)
        except subprocess.CalledProcessError:
            # If there are no commits, compare to empty tree
            branch_diff = subprocess.check_output(['git', 'diff', '--cached'], text=True)
        
        try:
            recent_commits = subprocess.check_output(['git', 'log', '--oneline', '-5'], text=True, stderr=subprocess.DEVNULL)
        except subprocess.CalledProcessError:
            # No commits exist yet
            recent_commits = "(This is the first commit in the repository)"
    except subprocess.CalledProcessError:
        sys.exit(1)
    
    # Create the prompt for Claude
    prompt = f"""
You are an AI assistant specialized in rewriting Git commit messages to be clear, detailed, and helpful. Your task is to analyze the provided information and generate an improved commit message.

First, review the following context:

1. Staged Changes (This Commit):
<staged_diff>
{diff}
</staged_diff>

2. Full Branch Changes:
<branch_diff>
{branch_diff}
</branch_diff>

3. Branch Information:
<branch_context>
Current Branch: {branch_name}
Base Branch: {base_branch}
</branch_context>

4. Recent Commits:
<recent_commits>
{recent_commits}
</recent_commits>

5. User's Draft Message:
<user_message>
{initial_msg}
</user_message>

Now, follow these steps to generate an improved commit message:

1. Analyze the provided information:
   - Understand the context of the change within the broader feature or fix being worked on.
   - Examine the staged changes and full branch changes.
   - Consider the recent commit history and branch information.

2. Break down your thought process inside <change_analysis> tags:
   - Summarize the main changes, quoting specific parts of the diffs and recent commits.
   - Categorize the type of change (e.g., feature addition, bug fix, refactoring).
   - Explain potential reasons for these changes based on the context.
   - List any potential implications or side effects of the changes.
   - State your confidence level in understanding the intent (e.g., "I'm very confident", "I'm somewhat confident", "I'm not confident").
   - List any questions or uncertainties about the changes.

3. Compose the rewritten commit message:
   - Start with a short, descriptive title (less than 80 characters).
   - If the intent is clear, include additional paragraphs explaining why the change was made.
   - If the intent is not clear, provide only a short summary of the change in the title.
   - Use blank lines to separate paragraphs.
   - Ensure the message is professional, descriptive, and accurately reflects the changes.
   - Do not include affirmations or comment on the correctness of the changes.

4. Review and refine your message:
   - Ensure it meets all the requirements mentioned above.
   - Check that it accurately reflects the changes without any erroneous descriptions.

5. Format your response using these XML tags:
<change_analysis>
[Your detailed analysis of the changes]
</change_analysis>

<commit_message>
[Your generated commit message - can be multi-line with title and description]
</commit_message>

Example output structure (note: this is a generic example, your actual content will vary based on the specific changes):

<change_analysis>
Main changes:
1. [Description of first major change]
   Quote from diff: "[relevant code snippet]"
2. [Description of second major change]
   Quote from diff: "[relevant code snippet]"
3. [Description of third major change]
   Quote from recent commit: "[relevant commit message]"

Change category: [feature addition/bug fix/refactoring]

These changes appear to be related to [feature/bug fix/refactoring]. Based on the recent commit history, it seems that this is part of a larger effort to [overall goal].

Potential implications:
- [Implication 1]
- [Implication 2]

I'm [confidence level] about the intent of these changes. [Explanation of confidence level]

Questions/uncertainties:
- [Question 1]
- [Question 2]
</change_analysis>

<commit_message>
[Short, descriptive title less than 80 characters]

[Paragraph explaining the reason for the change, if intent is clear]

[Additional paragraph with more details, if necessary]

[Final paragraph summarizing the impact or importance of the change]
</commit_message>

Remember to prioritize accuracy, clarity, and helpfulness in your analysis and commit message. Your goal is to provide a commit message that will be valuable for other developers reviewing the code changes.
"""
    
    # Call Claude CLI
    try:
        result = subprocess.run(['claude'], input=prompt, text=True, capture_output=True)
        if result.returncode != 0:
            print("Error calling Claude CLI")
            sys.exit(1)
        rewritten_msg = result.stdout.strip()
    except FileNotFoundError:
        print("Claude CLI not found. Please install it first.")
        sys.exit(1)
    
    # Parse Claude's response using proper XML parsing
    analysis = ""
    commit_message = ""
    
    try:
        # Wrap the response in a root element to make it valid XML
        xml_content = f"<root>{rewritten_msg}</root>"
        root = ET.fromstring(xml_content)
        
        # Extract analysis if present
        analysis_elem = root.find('commit_analysis')
        if analysis_elem is not None:
            analysis = analysis_elem.text.strip() if analysis_elem.text else ""
        
        # Extract commit message
        commit_msg_elem = root.find('commit_message')
        if commit_msg_elem is not None:
            commit_message = commit_msg_elem.text.strip() if commit_msg_elem.text else ""
            
    except ET.ParseError:
        # Fallback to regex if XML parsing fails
        analysis_match = re.search(r'<commit_analysis>(.*?)</commit_analysis>', rewritten_msg, re.DOTALL)
        if analysis_match:
            analysis = analysis_match.group(1).strip()
        
        commit_msg_match = re.search(r'<commit_message>(.*?)</commit_message>', rewritten_msg, re.DOTALL)
        if commit_msg_match:
            commit_message = commit_msg_match.group(1).strip()
        else:
            # If no XML tags found, use the whole response as commit message
            commit_message = rewritten_msg
            # Remove analysis from commit message if found
            commit_message = re.sub(r'<commit_analysis>.*?</commit_analysis>', '', commit_message, flags=re.DOTALL)
    
    # Clean any markdown code block output from commit message
    commit_message = re.sub(r'^```.*$', '', commit_message, flags=re.MULTILINE)
    commit_message = re.sub(r'^# ', '', commit_message, flags=re.MULTILINE)
    commit_message = re.sub(r'\n\s*\n\s*\n', '\n\n', commit_message)  # Collapse multiple blank lines
    commit_message = commit_message.strip()
    
    # Show result to user - redirect to terminal
    with open('/dev/tty', 'w') as tty:
        tty.write("\n")
        
        # Show analysis if available
        if analysis:
            tty.write("Claude's Analysis:\n")
            tty.write("-" * 60 + "\n")
            tty.write(analysis + "\n")
            tty.write("-" * 60 + "\n")
            tty.write("\n")
        
        tty.write("Claude's Suggested Commit Message:\n")
        tty.write("-" * 60 + "\n")
        tty.write(commit_message + "\n")
        tty.write("-" * 60 + "\n")
        tty.write("\n")
        tty.write("Choose what to do:\n")
        tty.write("1) Use it\n")
        tty.write("2) Edit it\n") 
        tty.write("3) Keep original\n")
        tty.write("4) Cancel commit\n")
    
    # Force interactive mode
    
    while True:
        try:
            sys.stdin = open('/dev/tty', 'r')
            sys.stdout = open('/dev/tty', 'w')
            choice = input("Enter your choice (1-4): ").strip()
            if choice == "1":
                with open(commit_msg_file, 'w') as f:
                    f.write(commit_message)
                sys.exit(0)
            elif choice == "2":
                with open(commit_msg_file, 'w') as f:
                    f.write(commit_message)
                editor = os.environ.get('EDITOR', 'vi')
                subprocess.call([editor, commit_msg_file])
                sys.exit(0)
            elif choice == "3":
                sys.exit(0)
            elif choice == "4":
                print("Commit cancelled.")
                sys.exit(1)
            else:
                print("Please choose a valid option (1-4).")
        except KeyboardInterrupt:
            print("\nCommit cancelled.")
            sys.exit(1)
        except EOFError:
            print("\nUsing Claude's suggestion (default choice).")
            with open(commit_msg_file, 'w') as f:
                f.write(commit_message)
            sys.exit(0)

if __name__ == "__main__":
    main()
