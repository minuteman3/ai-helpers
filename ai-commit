#!/usr/bin/env zsh

# ai-commit: Generate intelligent commit messages using Claude Code
# Usage: ai-commit

ai-commit() {
    # Check if we're in a git repository
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo "Error: Not in a git repository" >&2
        return 1
    fi

    # Check if there are staged changes
    if git diff --staged --quiet; then
        echo "No staged changes found. Stage your changes first with 'git add'." >&2
        return 1
    fi

    echo "Generating commit message with Claude Code..."

    # Get current branch name
    local current_branch=$(git branch --show-current)
    if [[ -z "$current_branch" ]]; then
        echo "Warning: Could not determine current branch (detached HEAD?)" >&2
        current_branch="detached"
    fi

    # Check if we're on main/master branch
    local is_main_branch=false
    if [[ "$current_branch" == "master" || "$current_branch" == "main" ]]; then
        is_main_branch=true
    fi

    # Get recent commit history for context
    local commit_history=""
    if [[ "$is_main_branch" == false ]]; then
        # Get commits on this branch that aren't on main/master
        local main_branch="main"
        if git show-ref --verify --quiet refs/heads/master; then
            main_branch="master"
        fi
        
        # Get the last 5 commits on this branch since it diverged from main
        commit_history=$(git log --oneline --max-count=5 "$main_branch..$current_branch" 2>/dev/null)
    else
        # On main branch, get last 3 recent commits for context
        commit_history=$(git log --oneline --max-count=3 2>/dev/null)
    fi

    # Build the context for Claude
    local prompt="Generate a concise, professional commit message for the following git diff. Focus on the intent and impact of the changes. Return only the commit message, no additional text."
    
    # Add branch context if not on main/master
    if [[ "$is_main_branch" == false ]]; then
        prompt+="\n\nBranch context: This is on branch '$current_branch'"
        
        if [[ -n "$commit_history" ]]; then
            prompt+="\n\nRecent commits on this branch:"
            prompt+="\n$commit_history"
            prompt+="\n\nConsider whether this change is:"
            prompt+="\n- A new feature or enhancement"
            prompt+="\n- A fix or refinement of recent work"
            prompt+="\n- An incremental improvement (like fixing syntax errors)"
        fi
    else
        if [[ -n "$commit_history" ]]; then
            prompt+="\n\nRecent commits for context:"
            prompt+="\n$commit_history"
        fi
    fi

    prompt+="\n\nGit diff:"

    # Get staged changes
    local staged_changes=$(git diff --staged)
    
    # Generate commit message using Claude Code
    local commit_message
    commit_message=$(claude -p "$(printf "%s\n%s" "$prompt" "$staged_changes")" --output-format text 2>/dev/null)
    
    if [[ $? -ne 0 || -z "$commit_message" ]]; then
        echo "Error: Failed to generate commit message with Claude Code" >&2
        echo "This could be due to a Claude Code installation issue." >&2
        echo "As a fallback, here's the prompt you can copy and paste to Claude Code:" >&2
        echo "─────────────────────────" >&2
        printf "%s\n%s" "$prompt" "$staged_changes"
        echo "─────────────────────────" >&2
        return 1
    fi

    # Clean up the commit message (remove any extra whitespace and Claude attribution)
    commit_message=$(echo "$commit_message" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | sed '/🤖 Generated with \[Claude Code\]/,$d')

    # Show the generated message to the user
    echo "\nGenerated commit message:"
    echo "─────────────────────────"
    echo "$commit_message"
    echo "─────────────────────────"

    # Ask for confirmation
    echo -n "\nProceed with this commit? [Y/n]: "
    read -r response
    
    if [[ "$response" =~ ^[Nn]([Oo])?$ ]]; then
        echo "Commit cancelled."
        return 0
    fi

    # Create the commit
    if git commit -m "$commit_message"; then
        echo "✅ Commit created successfully!"
    else
        echo "❌ Failed to create commit" >&2
        return 1
    fi
}

# If this script is being executed directly (not sourced), run the function
if [[ "${ZSH_EVAL_CONTEXT}" == "toplevel" ]]; then
    ai-commit "$@"
fi