#!/usr/bin/env python3

import sys
import subprocess
import re
import os
import xml.etree.ElementTree as ET

def run_command(cmd):
    """Run a shell command and return the output"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.stdout.strip() if result.returncode == 0 else ""
    except Exception:
        return ""

def run_command_check(cmd):
    """Run a shell command and return success status"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.returncode == 0
    except Exception:
        return False

def is_git_repo():
    """Check if we're in a git repository"""
    return run_command_check("git rev-parse --git-dir > /dev/null 2>&1")

def get_current_branch():
    """Get the current branch name"""
    branch = run_command("git branch --show-current")
    return branch if branch else None

def get_main_branch():
    """Determine the main branch (main or master)"""
    if run_command_check("git rev-parse --verify origin/main > /dev/null 2>&1"):
        return "main"
    elif run_command_check("git rev-parse --verify origin/master > /dev/null 2>&1"):
        return "master"
    return None

def main():
    additional_context = sys.argv[1] if len(sys.argv) > 1 else ""
    
    # Check if we're in a git repository
    if not is_git_repo():
        print("Error: Not in a git repository", file=sys.stderr)
        sys.exit(1)

    # Get current branch name
    current_branch = get_current_branch()
    if not current_branch:
        print("Error: Could not determine current branch (detached HEAD?)", file=sys.stderr)
        sys.exit(1)

    # Check if we're on main/master branch
    if current_branch in ["master", "main"]:
        print("Error: Cannot create PR from main/master branch", file=sys.stderr)
        sys.exit(1)

    # Check if branch has upstream and is pushed to remote
    if not run_command_check(f"git rev-parse --verify origin/{current_branch} > /dev/null 2>&1"):
        print(f"Error: Branch '{current_branch}' not found on remote. Push the branch first.", file=sys.stderr)
        sys.exit(1)

    # Get the main branch (prefer main over master)
    main_branch = get_main_branch()
    if not main_branch:
        print("Error: Could not find main or master branch on remote", file=sys.stderr)
        sys.exit(1)

    print("Generating PR description with Claude Code...", file=sys.stderr)

    # Get commit history for this branch (from main branch)
    commit_log = run_command(f"git log {main_branch}..{current_branch} --oneline")
    if not commit_log:
        print(f"Error: No commits found on branch '{current_branch}' compared to '{main_branch}'", file=sys.stderr)
        sys.exit(1)

    # Get the full diff for context
    try:
        branch_diff = subprocess.check_output(['git', 'diff', f'{main_branch}...{current_branch}'], text=True)
        recent_commits = subprocess.check_output(['git', 'log', '--oneline', '-5'], text=True)
    except subprocess.CalledProcessError:
        print("Error: Failed to get git information", file=sys.stderr)
        sys.exit(1)

    # Create the sophisticated prompt for Claude
    prompt = f"""
You are an AI assistant specialized in generating comprehensive GitHub Pull Request titles and descriptions. Your task is to analyze the provided information and generate a well-structured PR.

First, review the following context:

1. Branch Changes (Full Diff):
<branch_diff>
{branch_diff}
</branch_diff>

2. Branch Information:
<branch_context>
Branch: {current_branch}
Base: {main_branch}
</branch_context>

3. Commit History:
<commit_log>
{commit_log}
</commit_log>

4. Recent Commits for Context:
<recent_commits>
{recent_commits}
</recent_commits>

5. Additional Context:
<additional_context>
{additional_context}
</additional_context>

Now, follow these steps to generate a comprehensive PR:

1. Analyze the provided information:
   Break down your thought process inside <pr_analysis> tags:
   - Identify and list changed files
   - Categorize changes (e.g., new features, bug fixes, refactoring)
   - Summarize the main changes you've identified
   - Explain the potential reasons for these changes
   - Determine the scope and impact of the changes
   - Identify any notable patterns or themes in the commits
   - Note any dependencies or libraries added/removed
   - Identify potential areas of concern or review focus
   - State your confidence level in understanding the intent
   - Double-check that your analysis is consistent with the provided information
   - Identify the type of change (feature, bugfix, refactor, etc.)

2. Generate the PR title:
   - Create a concise, descriptive title (less than 80 characters)
   - Ensure the title accurately reflects the main purpose of the changes

3. Generate the PR description:
   - Write a comprehensive description explaining:
     * What changes were made
     * Why the changes were necessary
     * Any notable implementation details
     * Impact on the codebase or users
   - Use proper markdown formatting
   - Include any relevant testing notes or considerations

4. Format your response using these XML tags:

<pr_analysis>
[Your detailed analysis of the changes]
</pr_analysis>

<title>
[Your generated title]
</title>

<body>
[Your generated PR description in markdown format]
</body>

Ensure that your title and description are professional, accurate, and provide clear value to code reviewers. Double-check that all information in your output is consistent with the provided context.

Example output structure (do not copy this content, it's just to illustrate the format):

<pr_analysis>
The changes in this PR involve refactoring the user authentication module. The main modifications include:
1. Updating the password hashing algorithm
2. Implementing two-factor authentication
3. Improving error handling for failed login attempts

These changes appear to be motivated by security concerns and aim to enhance the overall robustness of the authentication system. The scope of the changes is significant, affecting multiple files within the auth module.

Based on the commit history and branch diff, I'm highly confident (90%) that this PR represents a major security enhancement for the user authentication system.
</pr_analysis>

<title>
Enhance User Authentication with 2FA and Improved Security Measures
</title>

<body>
## Changes Made
- Updated password hashing algorithm to bcrypt
- Implemented two-factor authentication using TOTP
- Improved error handling for failed login attempts

## Reason for Changes
These updates were necessary to address potential security vulnerabilities in our current authentication system and to align with industry best practices.

## Implementation Details
- The `PasswordHasher` class now uses bcrypt with a work factor of 12
- Added a new `TwoFactorAuth` class to handle TOTP generation and verification
- Modified the `LoginController` to incorporate 2FA checks

## Impact
- Increased security for user accounts
- Slightly longer login process for users (2FA step added)
- Potential need for user education on 2FA setup

## Testing Notes
- Comprehensive unit tests added for new and modified classes
- Manual testing required for 2FA flow
- Load testing recommended to ensure performance under high traffic

Please review these changes carefully, focusing on the security implications and user experience impact.
</body>
"""

    # Call Claude CLI
    try:
        result = subprocess.run(['claude'], input=prompt, text=True, capture_output=True)
        if result.returncode != 0:
            print("Error: Failed to generate PR title and description with Claude Code", file=sys.stderr)
            print("This could be due to a Claude Code installation issue.", file=sys.stderr)
            print("As a fallback, here's the prompt you can copy and paste to Claude Code:", file=sys.stderr)
            print("─" * 60, file=sys.stderr)
            print(prompt, file=sys.stderr)
            print("─" * 60, file=sys.stderr)
            sys.exit(1)
        pr_response = result.stdout.strip()
    except FileNotFoundError:
        print("Error: Claude CLI not found. Please install it first.", file=sys.stderr)
        sys.exit(1)

    # Parse the response using proper XML parsing
    analysis = ""
    pr_title = ""
    pr_description = ""
    
    try:
        # Wrap the response in a root element to make it valid XML
        xml_content = f"<root>{pr_response}</root>"
        root = ET.fromstring(xml_content)
        
        # Extract analysis if present
        analysis_elem = root.find('pr_analysis')
        if analysis_elem is not None:
            analysis = analysis_elem.text.strip() if analysis_elem.text else ""
        
        # Extract title
        title_elem = root.find('title')
        if title_elem is not None:
            pr_title = title_elem.text.strip() if title_elem.text else ""
        
        # Extract body/description
        body_elem = root.find('body')
        if body_elem is not None:
            pr_description = body_elem.text.strip() if body_elem.text else ""
            
    except ET.ParseError:
        # Fallback to regex if XML parsing fails
        analysis_match = re.search(r'<pr_analysis>(.*?)</pr_analysis>', pr_response, re.DOTALL)
        if analysis_match:
            analysis = analysis_match.group(1).strip()

        title_match = re.search(r'<title>(.*?)</title>', pr_response, re.DOTALL)
        if title_match:
            pr_title = title_match.group(1).strip()
        
        body_match = re.search(r'<body>(.*?)</body>', pr_response, re.DOTALL)
        if body_match:
            pr_description = body_match.group(1).strip()

    # Fallback to branch name if title parsing failed
    if not pr_title:
        pr_title = current_branch.replace('-', ' ').replace('_', ' ').title()

    # Add the footer attribution
    if pr_description and not pr_description.endswith("Generated with [Claude Code](https://claude.ai/code)"):
        pr_description = f"{pr_description}\n\n🤖 Generated with [Claude Code](https://claude.ai/code)"

    # Show result to user - redirect to terminal
    try:
        with open('/dev/tty', 'w') as tty:
            tty.write("\n")
            
            # Show analysis if available
            if analysis:
                tty.write("Claude's Analysis:\n")
                tty.write("─" * 60 + "\n")
                tty.write(analysis + "\n")
                tty.write("─" * 60 + "\n")
                tty.write("\n")
            
            tty.write("Generated PR Title:\n")
            tty.write("─" * 60 + "\n")
            tty.write(pr_title + "\n")
            tty.write("─" * 60 + "\n")
            tty.write("\n")
            tty.write("Generated PR Description:\n")
            tty.write("─" * 60 + "\n")
            tty.write(pr_description + "\n")
            tty.write("─" * 60 + "\n")
            tty.write("\n")
            tty.write("Choose what to do:\n")
            tty.write("1) Create PR with this title and description\n")
            tty.write("2) Edit title and description\n") 
            tty.write("3) Cancel\n")
    except:
        # Fallback to stderr if /dev/tty is not available
        print(f"\nGenerated PR Title:\n{pr_title}\n", file=sys.stderr)
        print(f"Generated PR Description:\n{pr_description}\n", file=sys.stderr)

    # Interactive choice
    while True:
        try:
            # Force connection to terminal for interactive input
            sys.stdin = open('/dev/tty', 'r')
            sys.stdout = open('/dev/tty', 'w')
            choice = input("Enter your choice (1-3): ").strip()
            
            if choice == "1":
                # Create the PR using gh CLI
                if not subprocess.run(['which', 'gh'], capture_output=True).returncode == 0:
                    print("Error: GitHub CLI (gh) not found. Please install it to create PRs automatically.", file=sys.stderr)
                    print("Alternatively, you can copy the description above and create the PR manually.", file=sys.stderr)
                    sys.exit(1)
                
                try:
                    result = subprocess.run([
                        'gh', 'pr', 'create', 
                        '--title', pr_title,
                        '--body', pr_description,
                        '--base', main_branch,
                        '--draft'
                    ], capture_output=True, text=True)
                    
                    if result.returncode == 0:
                        print("✅ Draft PR created successfully!")
                        # Extract PR URL from gh output if available
                        if result.stderr:
                            print(result.stderr.strip())
                        sys.exit(0)
                    else:
                        print("❌ Failed to create PR", file=sys.stderr)
                        if result.stderr:
                            print(result.stderr.strip(), file=sys.stderr)
                        sys.exit(1)
                except Exception as e:
                    print(f"❌ Failed to create PR: {e}", file=sys.stderr)
                    sys.exit(1)
                    
            elif choice == "2":
                # Edit the title and description
                import tempfile
                with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
                    f.write(f"# PR Title\n{pr_title}\n\n# PR Description\n{pr_description}")
                    temp_file = f.name
                
                editor = os.environ.get('EDITOR', 'vi')
                subprocess.call([editor, temp_file])
                
                # Read back the edited content
                with open(temp_file, 'r') as f:
                    edited_content = f.read()
                
                # Parse the edited content
                lines = edited_content.split('\n')
                title_section = False
                desc_section = False
                edited_title = ""
                edited_desc = []
                
                for line in lines:
                    if line.strip() == "# PR Title":
                        title_section = True
                        desc_section = False
                        continue
                    elif line.strip() == "# PR Description":
                        title_section = False
                        desc_section = True
                        continue
                    elif line.startswith("#"):
                        title_section = False
                        desc_section = False
                        continue
                    
                    if title_section and line.strip():
                        edited_title = line.strip()
                        title_section = False
                    elif desc_section:
                        edited_desc.append(line)
                
                pr_title = edited_title if edited_title else pr_title
                pr_description = '\n'.join(edited_desc).strip() if edited_desc else pr_description
                
                # Clean up temp file
                os.unlink(temp_file)
                
                # Now create the PR with edited content
                try:
                    result = subprocess.run([
                        'gh', 'pr', 'create', 
                        '--title', pr_title,
                        '--body', pr_description,
                        '--base', main_branch,
                        '--draft'
                    ], capture_output=True, text=True)
                    
                    if result.returncode == 0:
                        print("✅ Draft PR created successfully with your edits!")
                        if result.stderr:
                            print(result.stderr.strip())
                        sys.exit(0)
                    else:
                        print("❌ Failed to create PR", file=sys.stderr)
                        if result.stderr:
                            print(result.stderr.strip(), file=sys.stderr)
                        sys.exit(1)
                except Exception as e:
                    print(f"❌ Failed to create PR: {e}", file=sys.stderr)
                    sys.exit(1)
                    
            elif choice == "3":
                # Cancel
                print("PR creation cancelled.")
                sys.exit(0)
            else:
                print("Please choose a valid option (1-3).")
                
        except KeyboardInterrupt:
            print("\nPR creation cancelled.")
            sys.exit(1)
        except EOFError:
            # Default to creating PR when EOF is encountered
            print("\nCreating PR with generated content (default choice).")
            choice = "1"
            continue

if __name__ == "__main__":
    main()
